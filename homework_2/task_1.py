# Условие
# На вход подается число n.
# Написать скрипт в любой парадигме, который выводит на экран таблицу умножения всех чисел от 1 до n.
# Обоснуйте выбор парадигм.
def multiplication_p ():
# Данная функция использована как элемент процедурной парадигмы. Нужна когда число передаваемое в функцию
# не будет использоваться в дальнейшем само по себе. В  программе используются только результат функции. Также
# предполагается переиспользование кода функции.
    number = int(input("Введите число: "))
    print("Наблица умножения числа: ", number)
    for count in range(1, 11):
        print(number, 'x', count, '=', number * count)
def multiplication_sp (number):
# Данная функция использована как элемент процедурной и структурной парадигмы. Нужна когда число передаваемое
# в функцию будет использоваться в дальнейшем само по себе.  В программе используется и само передаваемое число и
# результат функции. Также предполагается переиспользование кода функции.
    print("Наблица умножения числа: ", number)
    for count in range(1, 11):
        print(number, 'x', count, '=', number * count)
if __name__ == '__main__':
    multiplication_p()

    number = int(input("Введите число: "))
    multiplication_sp (number)

    # данные отрезок кода иллюстрирует чисто процедурный подход, переиспользование кода в программе не предполагается
    number = int(input("Введите число: "))
    print("Наблица умножения числа: ", number)
    for count in range(1, 11):
        print(number, 'x', count, '=', number * count)




